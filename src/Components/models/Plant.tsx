/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 grass_model.glb -t -T 
Files: grass_model.glb [940.15KB] > /Users/mohamedrefaay/Work Projects/Ref Brand/ref-world/public/models/grass_model-transformed.glb [127.69KB] (86%)
*/

import * as THREE from "three";
import React, { useEffect, useMemo, useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { BatchedMesh, GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    grass001: THREE.Mesh;
  };
  materials: {
    ["Material.001"]: THREE.MeshStandardMaterial;
  };
};

const temp = new THREE.Object3D();

const count = 25000;

export function Plant(props: JSX.IntrinsicElements["group"]) {
  const map = useTexture(
    "./textures/plant/color2-removebg-preview.png",
    (t) => (t.flipY = false),
  );

  const { nodes, materials } = useGLTF(
    "./models/grass_model-transformed.glb",
  ) as GLTFResult;

  let material = new THREE.MeshStandardMaterial({
    map: map,
    color: "white",
    roughness: 0.5,
    metalness: 0.5,
    transparent: true,
    side: THREE.DoubleSide,
    alphaTest: 0.5,
  });

  material = materials["Material.001"];
  material.depthWrite = true;
  material.alphaTest = 0.85;

  const ref = React.useRef<THREE.InstancedMesh>(null);

  const box = new THREE.BoxGeometry(1, 1, 1);
  const sphere = new THREE.BoxGeometry(1, 1, 1);

  // initialize and add geometries into the batched mesh
  const batchedMesh = useMemo(
    () => new BatchedMesh(count, count * 40, count * 40, material),
    [],
  );

  const ids = useRef<number[]>([]);

  useEffect(() => {
    if (ref.current) {
      for (let i = 0; i < count; i++) {
        const id = batchedMesh.addGeometry(nodes.grass001.geometry);
        ids.current.push(id);
        const x = (Math.random() * 2 - 1) * 10;
        // const x = 0;
        const z = (Math.random() * 2 - 1) * 10;
        // const z = 0;
        // const y = (Math.random() * 2 - 1) * 4;
        const y = 0;

        temp.rotation.y = Math.random() * Math.PI * 2;
        temp.position.set(x, y, z);
        temp.scale.set(0.2, 0.2, 0.2);
        temp.updateMatrix();
        batchedMesh.setMatrixAt(id, temp.matrix);
      }
    }

    return () => {
      ids.current = [];
    };
  }, [ref]);

  return (
    <group {...props} dispose={null}>
      <primitive object={batchedMesh} ref={ref} />
    </group>
  );
}

useGLTF.preload("./models/grass_model-transformed.glb");
